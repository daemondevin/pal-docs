
Topic 3.6 <i class="icon-docs"></i>

----------

**Table of Contents <i class="icon-sitemap"></i>**

[TOC]

----------

# Macros
## About Macros
A macro's code is not called at runtime, it is instead inserted at compile time. Think of it like you are copying and pasting your code each time you express the `!insertmacro` statement. So anything written between the `!macro MacroName` and the `!macroend` commands will then be copied and pasted in place of `!insertmacro MacroName` at compile time.

```NSIS
!macro MacroName _PARM1 _PARM2
  DetailPrint "${_PARM1}"
  MessageBox MB_OK "${_PARM2}"
!macroend
```

So you can think of a macro as a piece of code you can write just the once, thus enabling the use of defining just a single command (`!insertmacro MacroName`) for it's function at anytime thereafter. This enables you to write commonly used snippets of code only once and use it as many times as needed with little changes.

## Writing Macros
To create a macro you start with the command `!macro` and you end it with the `!macroend` command like in the above snippet. The name of the macro is declared just after the `!macro` statement. So looking at the above example the macro's name is _MacroName_. Macros can have parameters, as many as you desire, which may be accessed the same way a `!define` statement would be from inside the macro. Using the above snippet the parameters would be declared just after the macro's name (`_PARM1` and `_PARM2`). To make use of a marco later on you would use the `!insertmacro` command (<abbr>i.e.</abbr>`!insertmacro MacroName "Parameter 1" "Parameter 2"`).

> <i class="icon-help-circled"></i> **Note** 
> I use an underscore (`_`) for parameter names because it is easier this way to discern from `!define` definitions which may be used within a macro as well. I also try to keep parameters, along with `!define` statements, capitalized as it is easier to read.

Alright, lets start writing our first macro now. When writing a macro you'll want to think of it's purpose and functionality on how it'll be used. I assume you're familiar with how a PAF is structured and that you are aware about a configuration file called [`AppInfo.ini`](https://portableapps.com/manuals/PortableApps.comLauncher/ref/paf/appinfo.html) that resides in `..\App\AppInfo`. To reference the PAL that I'm developing, I sometimes need an easy way to read/write key/values to this configuration file. So let's start with something simple like the following:

```NSIS
!macro ReadAppInfoConfig _VALUE _SECTION _KEY
	ReadINIStr ${_VALUE} `$EXEDIR\App\AppInfo\AppInfo.ini` `${_SECTION}` `${_KEY}`
!macroend
```

Now that we have our macro declared we can now access it by expressing the `!insertmacro` command, like this: `!insertmacro ReadAppInfoConfig $0 "Section" "Key"`. We do not need to reference the file we're trying to access because it's already defined inside the macro declaration. However, that seems like a lot of typing just to use a simple macro that only has one command instruction inside it, right? You might be thinking to yourself, _"Why not just use the `ReadINIStr` command instead?"_ Well, let's look at this next code snippet.

```NSIS
!define ReadAppInfoConfig `!insertmacro _ReadAppInfoConfig`
!macro _ReadAppInfoConfig _VALUE _SECTION _KEY
	ReadINIStr ${_VALUE} `$EXEDIR\App\AppInfo\AppInfo.ini` `${_SECTION}` `${_KEY}`
!macroend
```

Do you see what's going on in the above code block? If not, I'll explain. Line 1 is a `!define` which declares `ReadAppInfoConfig` as `!insertmacro _ReadAppInfoConfig`. Remember, a macro is like copying and pasting so any time you use `${ReadAppInfoConfig}` it'll be replaced with `!insertmacro _ReadAppInfoConfig`. Pretty cool, huh? so now you can do something like the following:

```NSIS
;=# The following code is what we see and is easy to read:
${ReadAppInfoConfig} $0 "Details" "Name"
${ReadAppInfoConfig} $1 "Version" "PackageVersion"
;= $0 == Application Name
;= $1 == 1.2.3.4
MessageBox MB_OK "[Details]Name | $$0 == $0$\r$\n[Version]PackageVersion | $$1 == $1"

;=# To the compiler the above code will look like this:
ReadINIStr $0 `$EXEDIR\App\AppInfo\AppInfo.ini` `Details` `Name`
ReadINIStr $1 `$EXEDIR\App\AppInfo\AppInfo.ini` `Version` `PackageVersion`
;= $0 == Application Name
;= $1 == 1.2.3.4
MessageBox MB_OK "[Details]Name | $$0 == $0$\r$\n[Version]PackageVersion | $$1 == $1"
```

## Useful Macros
The code block below contains things that may be used with my version of [`PAL`](https://github.com/demondevin/portableapps.comlauncher "demon.devin's PA.c Launcher GitHub Project Page"). It is all declared in the `PortableApps.comLauncher.nsi` file which means you are able to use any `!define` and `!macro` in the `custom.nsh` file. Hopefully you now have the means to read the code so it'll be self-explanatory and understandable.

> <i class="icon-help-circled"></i> **Note** 
> If you don't understand something and/or need help on what something actually does, just leave me a comment on the [official page](http://softables.tk/docs/basics/macros "Macros | Softables.tk/") at the bottom and I'll asset you accordingly.

```NSIS
;= DEFINES
;= ################
!define APPINFO					`$EXEDIR\App\AppInfo`
!define INFOINI					`${APPINFO}\appinfo.ini`
!define DATA					`$EXEDIR\Data`
!define SET						`${DATA}\settings`
!define DEFDATA					`$EXEDIR\App\DefaultData`
!define DEFSET					`${DEFDATA}\settings`
!define LAUNCHDIR				`${APPINFO}\Launcher`
!define LAUNCHER				`${LAUNCHDIR}\${APPNAME}.ini`
!define LAUNCHER2				`$PLUGINSDIR\launcher.ini`
!define RUNTIME					`${DATA}\PortableApps.comLauncherRuntimeData-${APPNAME}.ini`
!define RUNTIME2				`$PLUGINSDIR\runtimedata.ini`
!define SETINI					`${SET}\${APPNAME}Settings.ini`
!define CONFIG					`$EXEDIR\${APPNAME}.ini`
!define OTHER					`$EXEDIR\Other`
!define PAL						PortableApps.comLauncher

;= MACROS
;= ################
; ${ReadAppInfoConfig} $0 "Section" "Key"
!define ReadAppInfoConfig `!insertmacro _ReadAppInfoConfig`
!macro _ReadAppInfoConfig _VALUE _SECTION _KEY
	ReadINIStr ${_VALUE} `${INFOINI}` `${_SECTION}` `${_KEY}`
!macroend

; ${WriteAppInfoConfig} "Section" "Key" "Value"
!define WriteAppInfoConfig `!insertmacro _WriteAppInfoConfig`
!macro _WriteAppInfoConfig _SECTION _KEY _VALUE
	WriteINIStr `${INFOINI}` `${_SECTION}` `${_KEY}` `${_VALUE}`
!macroend

; ${DeleteAppInfoConfig} "Section" "Key"
!define DeleteAppInfoConfig `!insertmacro _DeleteAppInfoConfig`
!macro _DeleteAppInfoConfig _SECTION _KEY
	DeleteINIStr `${INFOINI}` `${_SECTION}` `${_KEY}`
!macroend

; ${DeleteAppInfoConfigSec} "Section"
!define DeleteAppInfoConfigSec `!insertmacro _DeleteAppInfoConfigSec`
!macro _DeleteAppInfoConfigSec _SECTION
	DeleteINISec `${LAUNCHER}` `${_SECTION}`
!macroend

; ${ReadLauncherConfig} $0 "Section" "Key"
!define ReadLauncherConfig `!insertmacro _ReadLauncherConfig`
!macro _ReadLauncherConfig _VALUE _SECTION _KEY
	ReadINIStr ${_VALUE} `${LAUNCHER}` `${_SECTION}` `${_KEY}`
!macroend

; ${WriteLauncherConfig} "Section" "Key" "Value"
!define WriteLauncherConfig `!insertmacro _WriteLauncherConfig`
!macro _WriteLauncherConfig _SECTION _KEY _VALUE
	WriteINIStr `${LAUNCHER}` `${_SECTION}` `${_KEY}` `${_VALUE}`
!macroend

; ${DeleteLauncherConfig} "Section" "Key"
!define DeleteLauncherConfig `!insertmacro _DeleteLauncherConfig`
!macro _DeleteLauncherConfig _SECTION _KEY
	DeleteINIStr `${LAUNCHER}` `${_SECTION}` `${_KEY}`
!macroend

; ${DeleteLauncherConfigSec} "Section"
!define DeleteLauncherConfigSec `!insertmacro _DeleteLauncherConfigSec`
!macro _DeleteLauncherConfigSec _SECTION
	DeleteINISec `${LAUNCHER}` `${_SECTION}`
!macroend

; ${ReadLauncherConfigWithDefault} $0 "Section" "Key" "Default Value"
!define ReadLauncherConfigWithDefault `!insertmacro _ReadLauncherConfigWithDefault`
!macro _ReadLauncherConfigWithDefault _VALUE _SECTION _KEY _DEFAULT
	ClearErrors
	${ReadLauncherConfig} ${_VALUE} `${_SECTION}` `${_KEY}`
	${IfThen} ${Errors} ${|} StrCpy ${_VALUE} `${_DEFAULT}` ${|}
!macroend

; ${ReadUserConfig} $0 "Key"
!define ReadUserConfig `!insertmacro _ReadUserConfig`
!macro _ReadUserConfig _VALUE _KEY
	${ConfigReadS} `${CONFIG}` `${_KEY}=` `${_VALUE}`
!macroend

; ${WriteUserConfig} "Value" "Key"
!define WriteUserConfig `!insertmacro _WriteUserConfig`
!macro _WriteUserConfig _VALUE _KEY
	${ConfigWriteS} `${CONFIG}` `${_KEY}=` `${_VALUE}` $R0
!macroend

; ${WriteRuntimeData} "Section" "Key" "Value"
!define WriteRuntimeData "!insertmacro _WriteRuntimeData"
!macro _WriteRuntimeData _SECTION _KEY _VALUE
	WriteINIStr `${RUNTIME}` `${_SECTION}` `${_KEY}` `${_VALUE}`
	WriteINIStr `${RUNTIME2}` `${_SECTION}` `${_KEY}` `${_VALUE}`
!macroend

; ${DeleteRuntimeData} "Section" "Key"
!define DeleteRuntimeData "!insertmacro _DeleteRuntimeData"
!macro _DeleteRuntimeData _SECTION _KEY
	DeleteINIStr `${RUNTIME}` `${_SECTION}` `${_KEY}`
	DeleteINIStr `${RUNTIME2}` `${_SECTION}` `${_KEY}`
!macroend

; ${ReadRuntimeData} $0 "Section" "Key"
!define ReadRuntimeData "!insertmacro _ReadRuntimeData"
!macro _ReadRuntimeData _RETURN _SECTION _KEY
	IfFileExists `${RUNTIME}` 0 +3
	ReadINIStr `${_RETURN}` `${RUNTIME}` `${_SECTION}` `${_KEY}`
	Goto +2
	ReadINIStr `${_RETURN}` `${RUNTIME2}` `${_SECTION}` `${_KEY}`
!macroend

; ${WriteRuntime} "Value" "Key"
!define WriteRuntime "!insertmacro _WriteRuntime"
!macro _WriteRuntime _VALUE _KEY
	WriteINIStr `${RUNTIME}` ${PAL} `${_KEY}` `${_VALUE}`
	WriteINIStr `${RUNTIME2}` ${PAL} `${_KEY}` `${_VALUE}`
!macroend

; ${ReadRuntime} $0 "Key"
!define ReadRuntime "!insertmacro _ReadRuntime"
!macro _ReadRuntime _VALUE _KEY
	IfFileExists `${RUNTIME}` 0 +3
	ReadINIStr `${_VALUE}` `${RUNTIME}` ${PAL} `${_KEY}`
	Goto +2
	ReadINIStr `${_VALUE}` `${RUNTIME2}` ${PAL} `${_KEY}`
!macroend

; ${WriteSettings} "Value" "Key"
!define WriteSettings `!insertmacro _WriteSettings`
!macro _WriteSettings _VALUE _KEY
	WriteINIStr `${SETINI}` ${APPNAME}Settings `${_KEY}` `${_VALUE}`
!macroend

; ${ReadSettings} $0 "Key"
!define ReadSettings `!insertmacro _ReadSettings`
!macro _ReadSettings _VALUE _KEY
	ReadINIStr `${_VALUE}` `${SETINI}` ${APPNAME}Settings `${_KEY}`
!macroend

; ${DeleteSettings} "Key"
!define DeleteSettings `!insertmacro _DeleteSettings`
!macro _DeleteSettings _KEY
	DeleteINIStr `${SETINI}` ${APPNAME}Settings `${_KEY}`
!macroend
```